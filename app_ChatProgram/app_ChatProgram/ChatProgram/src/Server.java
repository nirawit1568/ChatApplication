
import java.awt.Image;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import javax.swing.*;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.text.DefaultCaret;

public class Server extends JFrame implements Runnable {

    /**
     * Creates new form NewJFrame
     */
    public Server() {
        super("Server side");
        setIconImage(new ImageIcon("server.jpg").getImage());
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tf_area = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tf_txt = new javax.swing.JTextArea();
        bt_start = new javax.swing.JButton();
        bt_stop = new javax.swing.JButton();
        bt_send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tf_area.setColumns(20);
        tf_area.setRows(5);
        tf_area.setEditable(false);
        jScrollPane1.setViewportView(tf_area);

        tf_txt.setColumns(20);
        tf_txt.setRows(5);
        tf_txt.setEditable(false);
        jScrollPane2.setViewportView(tf_txt);

        bt_start.setText("Start");
        bt_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_startActionPerformed(evt);
            }
        });

        bt_stop.setText("Stop");
        bt_stop.setEnabled(false);
        bt_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_stopActionPerformed(evt);
            }
        });

        bt_send.setText("Send");
        bt_send.setEnabled(false);
        bt_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(bt_start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bt_stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bt_send, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(bt_start, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(bt_stop, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                                .addComponent(bt_send, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        DefaultCaret caret = (DefaultCaret) tf_area.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        pack();
    }// </editor-fold>

    private void bt_startActionPerformed(java.awt.event.ActionEvent evt) {
        isClosed = false;
        bt_start.setEnabled(false);
        bt_stop.setEnabled(true);
    }

    private void bt_stopActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            bt_send.setEnabled(false);
            bt_start.setEnabled(true);
            bt_stop.setEnabled(false);
            isClosed = true;
            tf_area.setText("");
            disconnect();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void bt_sendActionPerformed(java.awt.event.ActionEvent evt) {
        String message = tf_txt.getText(); //get the written message
        if (message.length() == 0) {
            tf_txt.setText("");
        } else {
            WriteJson(message, 1);
            message = "Server: " + message; //append the username
            try {
                serverToClient.writeBytes(message + "\n"); // write the message; //write a new line
                serverToClient.flush(); //flush the stream
                tf_txt.setText(""); //clear sendTextArea after the message was sent
                allText = tf_area.getText();
                allText = allText + "\n" + message;
                tf_area.setText(allText); //add the message to your receiveTextArea, you want to see what have you sent.
            } catch (Exception e) {
                try {
                    disconnect(); //if the message cannot be send, execute disconnect
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

    public void run() {
        while (true) //run application until the user closes it.
        {
            System.out.println("Waiting for connection");
            if (!isClosed) {
                sleep(1000); //add a small timeout to free up the processor to do other things.
                SerVer();
            }
        }
    }

    private void SerVer() {

        try {
            tf_area.setText("Waiting for user connect..........");
            server = new ServerSocket(8080);
            while (true) {
                client_connect = server.accept();
                if (client_connect != null) {
                    break;
                }
            }
            serverToClient = new DataOutputStream(client_connect.getOutputStream());
            clientToServer = new BufferedReader(new InputStreamReader(client_connect.getInputStream()));
            client_name = clientToServer.readLine();
            serverToClient.writeBytes("Your're connected to server \n");
            serverToClient.flush();
            tf_area.setText("User: " + client_name + " is connected to server");
            if (count == 0) { //first time to connect and check history
                ReadJson();
                count = 1;
            }
            bt_stop.setEnabled(true);
            bt_start.setEnabled(false);
            bt_send.setEnabled(true);
            tf_txt.setEditable(true);
            readMessages();
        } catch (IOException e) {
            System.out.println("Couldn't open server");
        }
    }

    private void readMessages()//read message from client.
    {
        try {
            while (!isClosed) {
                message = clientToServer.readLine(); //read a message from the connection
                if (message == null) {
                    tf_area.setText(client_name + " has disconnected. !!");
                    bt_send.setEnabled(false);
                    WriteJson("dis", 3);
                    disconnect();
                } else {
                    String allText = tf_area.getText(); //get all the text
                    allText = allText + "\n" + client_name + " : " + message; //append the new message
                    tf_area.setText(allText); //add all text
                    WriteJson(message, 0);
                }
            }
        } catch (Exception e) {
            System.out.println(e.toString() + "in readIncomingMessages");
            try {
                disconnect(); //if an error occurs, close the connection
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    public void disconnect() throws IOException {
        serverToClient.close();
        clientToServer.close();
        server.close();
        arr.clear();
        count = 0;
        olduser = false;
    }

    private void sleep(int milliseconds) {
        try {
            Thread.sleep(milliseconds);
        } catch (Exception e) {
            System.exit(1);
        }
    }

    public void WriteJson(String msg, int check) {
        // check = 0 is message from client.
        // check = 1 is message from server.
        // check = 3 or msg = dis is disconnect and write file.
        if (olduser) {
            JSONParser parser = new JSONParser();
            try {
                Object obj = parser.parse(new FileReader(client_name + ".txt"));
                JSONArray array = (JSONArray) obj;
                if(msg.equals("dis")){
                    FileWriter file = new FileWriter(client_name + ".txt");
                    file.write(array.toJSONString());
                    file.flush();
                    file.close();
                }
                else if (check == 1) {
                    JSONObject objj = new JSONObject();
                    objj.put("Username", "Server");
                    objj.put("Message", msg);
                    array.add(objj);
          
                } else if (check == 0) {
                    JSONObject objj = new JSONObject();
                    objj.put("Username", "Server");
                    objj.put("Message", msg);
                    array.add(objj);
                }
            } catch (Exception e) {

            }
        } else {
            if (msg.equals("dis")) {
                try {
                    FileWriter file = new FileWriter(client_name + ".txt");
                    file.write(arr.toJSONString());
                    file.flush();
                    file.close();
                } catch (Exception e) {
                    System.out.println("Error Writer" + e);
                }
            } else {
                if (check == 1) {
                    JSONObject objj = new JSONObject();
                    objj.put("Username", "Server");
                    objj.put("Message", msg);
                    arr.add(objj);
                } else if (check == 0) {
                    JSONObject objj = new JSONObject();
                    objj.put("Username", client_name);
                    objj.put("Message", msg);
                    arr.add(objj);
                }
            }
        }
    }
    
    public void ReadJson() {
        JSONParser parser = new JSONParser();
        try {
            Object obj = parser.parse(new FileReader(client_name + ".txt"));
            JSONArray array = (JSONArray) obj;
            JSONObject obj2;
            for (int i = 0; i < array.size(); i++) {
                obj2 = (JSONObject) array.get(i);
                readtxt = tf_area.getText();
                readtxt = readtxt + "\n" + ((String.valueOf(obj2.get("Username"))) + " : " + (String.valueOf(obj2.get("Message"))));
                tf_area.setText(readtxt);
            }
            SendJsonToClient(readtxt);
            olduser = true;
        } catch (Exception e) {
            SendJsonToClient(client_name + " first time for chat app.");
        }
    }

    public void SendJsonToClient(String msg) {
        try {
            serverToClient.writeBytes(msg + "\n"); // write the message; //write a new line
            serverToClient.flush(); //flush the stream
            tf_txt.setText(""); //clear sendTextArea after the message was sent

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Server sv = new Server(); //create the MainFrame object
        sv.setVisible(true);
        Thread thread = new Thread(sv); //run in a new thread
        thread.start(); //start the thread
    }

    private JSONArray arr = new JSONArray();
    private int count = 0;
    private boolean isClosed = true, olduser = false;
    private String client_name, allText, message, readtxt;
    private ServerSocket server = null;
    private Socket client_connect;
    private BufferedReader clientToServer;
    private DataOutputStream serverToClient;
    // Attributes

    private javax.swing.JButton bt_send;
    private javax.swing.JButton bt_start;
    private javax.swing.JButton bt_stop;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea tf_area;
    private javax.swing.JTextArea tf_txt;
    // GUI
}
